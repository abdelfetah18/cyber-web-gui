import { app, BrowserWindow } from 'electron';
import net from 'net';
import { readFileSync } from 'original-fs';
import HttpParser from './http_parser/HttpParser';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow = null;
// Create a TCP server
const server = net.createServer((socket) => {
  console.log('Client connected');

  // Handle data received from the client
  socket.on('data', (data) => {
    const message = data.toString();
    const requestIdMatch = message.match(/REQUEST_ID: [a-zA-Z0-9]{8}/g);
    if (!requestIdMatch) {
      return;
    }
    const requestId = requestIdMatch[0];
    try {
      // NOTE: Add /n character
      const HttpParserWithLoggerProxy = createLoggingProxy(HttpParser);
      const httpParser = new HttpParser(Buffer.from(data.buffer.slice(requestId.length + 1)));
      const httpResult = httpParser.parse(requestId);
      console.log(`requestId: ${requestId}`);
      if (mainWindow != null) {
        if (httpResult.request  != undefined) {
          mainWindow.webContents.send("http_request", httpResult);
        } else {
          mainWindow.webContents.send("http_response", httpResult);
        }

      }
    } catch (error) {
      console.log("error:", error);
    }
  });

  socket.on('end', () => {
    console.log('Client disconnected');
  });
});

// Start listening on port 8080
server.listen(5555, () => {
  console.log('TCP server listening on port 5555');
});

function createLoggingProxy(targetClass: any) {
  return new Proxy(targetClass, {
    construct(target, args: any) {
      const instance = new target(...args);

      return new Proxy(instance, {
        get(obj, prop: string) {
          const original = obj[prop];

          if (typeof original === 'function') {
            // Return a wrapper function that logs before invoking the original method
            return function (...args: any) {
              console.log(`Calling method: ${prop} with arguments:`, args);
              return original.apply(this, args);
            };
          }

          return original; // If it's not a function, return as is
        }
      });
    }
  });
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
